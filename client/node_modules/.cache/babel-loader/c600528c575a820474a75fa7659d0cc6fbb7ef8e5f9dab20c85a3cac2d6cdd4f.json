{"ast":null,"code":"const express = require('express');\nconst bcrypt = require('bcrypt');\nconst User = require('../models/User'); // Модель пользователя\nconst jwt = require('jsonwebtoken'); // Для создания токенов\nconst router = express.Router();\n\n// Роут для логина\nrouter.post('/login', async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  // Проверка, что email и пароль переданы\n  if (!email || !password) {\n    return res.status(400).json({\n      message: 'Email и пароль обязательны'\n    });\n  }\n  try {\n    // Поиск пользователя по email\n    const user = await User.findOne({\n      email\n    });\n\n    // Если пользователь не найден\n    if (!user) {\n      return res.status(400).json({\n        message: 'Неверный email или пароль'\n      });\n    }\n\n    // Сравнение введенного пароля с захешированным в базе данных\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({\n        message: 'Неверный email или пароль'\n      });\n    }\n\n    // Создание JWT токена\n    const token = jwt.sign({\n      userId: user._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '1h'\n    });\n\n    // Отправка успешного ответа с токеном\n    res.json({\n      token\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      message: 'Ошибка сервера'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","User","jwt","router","Router","post","req","res","email","password","body","status","json","message","user","findOne","isMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","error","console","module","exports"],"sources":["C:/Users/79241/Desktop/projectManager/client/src/pages/Login.js"],"sourcesContent":["const express = require('express');\r\nconst bcrypt = require('bcrypt');\r\nconst User = require('../models/User'); // Модель пользователя\r\nconst jwt = require('jsonwebtoken'); // Для создания токенов\r\nconst router = express.Router();\r\n\r\n// Роут для логина\r\nrouter.post('/login', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  // Проверка, что email и пароль переданы\r\n  if (!email || !password) {\r\n    return res.status(400).json({ message: 'Email и пароль обязательны' });\r\n  }\r\n\r\n  try {\r\n    // Поиск пользователя по email\r\n    const user = await User.findOne({ email });\r\n    \r\n    // Если пользователь не найден\r\n    if (!user) {\r\n      return res.status(400).json({ message: 'Неверный email или пароль' });\r\n    }\r\n\r\n    // Сравнение введенного пароля с захешированным в базе данных\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n    if (!isMatch) {\r\n      return res.status(400).json({ message: 'Неверный email или пароль' });\r\n    }\r\n\r\n    // Создание JWT токена\r\n    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n\r\n    // Отправка успешного ответа с токеном\r\n    res.json({ token });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Ошибка сервера' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,IAAI,GAAGF,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;AACxC,MAAMG,GAAG,GAAGH,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;AACrC,MAAMI,MAAM,GAAGL,OAAO,CAACM,MAAM,CAAC,CAAC;;AAE/B;AACAD,MAAM,CAACE,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;;EAEpC;EACA,IAAI,CAACF,KAAK,IAAI,CAACC,QAAQ,EAAE;IACvB,OAAOF,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA6B,CAAC,CAAC;EACxE;EAEA,IAAI;IACF;IACA,MAAMC,IAAI,GAAG,MAAMb,IAAI,CAACc,OAAO,CAAC;MAAEP;IAAM,CAAC,CAAC;;IAE1C;IACA,IAAI,CAACM,IAAI,EAAE;MACT,OAAOP,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA4B,CAAC,CAAC;IACvE;;IAEA;IACA,MAAMG,OAAO,GAAG,MAAMhB,MAAM,CAACiB,OAAO,CAACR,QAAQ,EAAEK,IAAI,CAACL,QAAQ,CAAC;IAE7D,IAAI,CAACO,OAAO,EAAE;MACZ,OAAOT,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA4B,CAAC,CAAC;IACvE;;IAEA;IACA,MAAMK,KAAK,GAAGhB,GAAG,CAACiB,IAAI,CAAC;MAAEC,MAAM,EAAEN,IAAI,CAACO;IAAI,CAAC,EAAEC,OAAO,CAACC,GAAG,CAACC,UAAU,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;;IAEzF;IACAlB,GAAG,CAACK,IAAI,CAAC;MAAEM;IAAM,CAAC,CAAC;EACrB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBnB,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAiB,CAAC,CAAC;EACrD;AACF,CAAC,CAAC;AAEFe,MAAM,CAACC,OAAO,GAAG1B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}